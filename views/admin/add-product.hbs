<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<style>
    .g-height-50 {
        height: 50px;
    }

    .g-width-50 {
        width: 50px !important;
    }

    @media (min-width: 0) {
        .g-pa-30 {
            padding: 2.14286rem !important;
        }
    }

    .g-bg-secondary {
        background-color: #fafafa !important;
    }

    .u-shadow-v18 {
        box-shadow: 0 5px 10px -6px rgba(0, 0, 0, 0.15);
    }

    .g-color-gray-dark-v4 {
        color: #777 !important;
    }

    .g-font-size-12 {
        font-size: 0.85714rem !important;
    }

    .media-comment {
        margin-top: 20px
    }

    .singleImageCanvasContainer {
        overflow: hidden;
        height: 200px;
        width: 30%;
        display: inline-block;
        position: relative;
        padding-right: 0px;
        margin-right: 15px;
        border: 2px solid #dfdfdf;
        margin-bottom: 10px;
        padding: 4px;
        border-radius: .25rem;
    }

    .singleImageCanvasContainer .singleImageCanvasCloseBtn {
        position: absolute;
        right: 0;
    }

    .singleImageCanvasContainer .singleImageCanvas {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
<div class="container">

    <div class="row">
        <div class="col-md-6">
            <h2 class="text-center">Add Product</h2>
    

<form action="/admin/add-products " method="post" enctype="multipart/form-data" id="gform" >
   
  <div class="form-group">
    <label for="">Name</label>
    <input id="name" type="text" class="form-control" onkeyup="validateName()" name="name" required>
        <p style="color:red ;" id="errorName"></p>
  </div>


   <div class="form-group">
    <label for="">Discription</label>
    <input type="text" class="form-control" name="discription" required>
    <p id="errorDiscription"></p>
  </div>

   
  <div class="form-group">  
      <label for="">Brand</label><br>

  <select for="brand" name="brandId" id="brand">
  {{#each brand}}
  <option value="{{this._id}}">{{this.brand}}</option>
  {{/each}}
</select>
</div>
   


     <div class="form-group mt-3">
    <label for="">Price</label>
    <input type="text" class="form-control" name="price" required>
  </div>

     
  <div class="form-group">
    <label for="">Reviews</label>
    <input type="text" class="form-control" name="reviews" required>
  </div>

<div class="form-group">
    <label for="">Stock</label>
    <input type="number" class="form-control" name="stock" required>
  </div>
<div class="form-outline mb-4">
            {{!-- <input type="password" id="registerPassword" name="Password" class="form-control" /> --}}
            <label class="form-label" for="id_image">Image</label>
            <span id="croppedImages"></span>
            <input type="file" class="form-control" id="id_image" name="image" data-toggle="modal"
                data-target="#exampleModal" accept="image/*" multiple>
        </div>
  <div class="container">

  <button type="submit" class="btn btn-primary mt-4  " onclick=" return validateForm()">Submit</button>
  <p style="color:red ;" id="errorSubmit"></p>
 </div>
 {{!-- sddsddddddddddddddddddddddddddddddddddddddddddddddddd --}}
               <div class="container m-5">
                {{!-- <fieldset class="form-group"> --}}

                   
                    {{!--
                </fieldset> --}}
                {{!-- <div class="form-group">
                    <button id="confirm-btn" style="margin-top: 10px;" type="submit">Post</button>
                </div> --}}

               
            {{!-- sssssssssssssssssssssssssssssssssssssssssssssssssssssss --}}
</form>

       </div>
    </div>

</div>
<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="form-group d-flex" id="test" style=" display: flex; flex-direction: column; ">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>


  
<script src="https://code.jquery.com/jquery-3.6.1.js" integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js" integrity="sha512-rstIgDs0xPgmG6RX1Aba4KV5cWJbAMcvRCVmglpam9SoHZiUCyQVDdH2LPlxoHtrv17XWblE/V/PP+Tr04hbtA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>




<script>
    let nameErrorEl = document.getElementById('errorName');  
    let emailErrorEl = document.getElementById('errorEmail'); 
    let passwordErrorEl =  document.getElementById('errorPassword');
    let mobileErrorEl =  document.getElementById('errorMobile');
    let submitErrorEl = document.getElementById('errorSubmit');
  function validateName(){
    let nameEl = document.getElementById('name').value;
    console.log(nameEl)

    if(nameEl.length==0){
      nameErrorEl.innerHTML="name required"
      return false
    }
    
    if(!nameEl.match(/^[A-Za-z0-9_!@#.]*\s{1}[A-Za-z0-9!@#$%&_.]*$/)){
            nameErrorEl.innerHTML="enter a valid name"
          return false
    }if(nameEl.length < 3){ 
                   nameErrorEl.innerHTML="minimum 3 letters required"
       }
    else
    {
            nameErrorEl.innerHTML=" "
          return true
    }
  }


   function validateForm(){ 

    if(!validateName()){
        submitErrorEl.style.display='block';
        submitErrorEl.innerHTML='Please fix error';
        setTimeout(function(){submitErrorEl.style.display='none';},3000);
        return false;
    }else{ 
       submitErrorEl.innerHTML='Message sent.';
       return true
    }
   }

</script>

<script>
    const input = document.getElementById('id_image')
    const test = document.getElementById('test')
    input.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data = []
        const imagebox = []
        const crop_btn = []
        const confirm_btn = []
        const url = []
        const length= input.files.length
        for (i = 0; i < length; i++) {
            test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }
        
        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url,i)=>{
            document.getElementById('image-box'+i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })
        
        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

        // Storing that cropping view image in a variable
  

        // Displaying the image box
        for(i=0;i<length;i++){
            document.getElementById('image-box'+i).style.display= 'block'
             document.getElementById('crop-btn'+i).style.display= 'block'
        }
       

        for(i=0;i<length;i++){
            cropper(img_data[i],document.getElementById('image'+i),i,document.getElementById('crop-btn'+i),document.getElementById('image-box'+i))
        }

        

        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('id_image');



        function cropper(img_data, image, index, crop_btn, imagebox) {

            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container

                    // Add the cropped image file to the container
                    container.items.add(file);

                    fileInputElement.files = container.files

                    // Replace the original image file with the new cropped image file



                    // Hide the cropper box
                    imagebox.style.display = 'none'
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            });
        }
    });
</script>



          {{!-- function validatePassword(){
          let passwordEl = document.getElementById('password').value;

          if(passwordEl.length==0){
            passwordErrorEl.innerHTML="password is required"
            return false
          }
        if(passwordEl.length < 5){
          passwordErrorEl.innerHTML="minumum 5 charecters required"
          return false

        }    else{
              passwordErrorEl.innerHTML=" "
              return true
            }
    }

    function validateMobile(){
        let moblieEl= document.getElementById('mobile').value;
         if(moblieEl.length !== 10){
          mobileErrorEl.innerHTML="enter avalid number"
          return false 

        } if(!moblieEl.match(/^[0-9]*$/)){
            mobileErrorEl.innerHTML="enter avalid number"
          return false
    }

           else{
              mobileErrorEl.innerHTML=" "
              return true
            }

    } --}}
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>